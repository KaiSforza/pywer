#!/usr/bin/env python3
import libaur.aur as libaur
import libaur.printer
import configparser
import xdg.BaseDirectory
import argparse

config = configparser.ConfigParser()
config.read(xdg.BaseDirectory.xdg_config_home + '/pywer/pywer.ini')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            description='A simple AUR helper in python.',
            epilog='See the config file in $PREFIX/share/doc/pywer')

    parser.add_argument('-s', '--search',
                        help='Search for this package',
                        metavar='term')
    parser.add_argument('-i', '--info',
                        help='Get info for this package',
                        metavar='pkg')
    parser.add_argument('-m', '--msearch',
                        help='Search for this maintainers packages',
                        metavar='maintainer')
    parser.add_argument('-u', '--update',
                        help='Print package updates for the system',
                        action='store_true')
    parser.add_argument('-d', '--download',
                        help='Download the package',
                        metavar='pkg')
    parser.add_argument('-q', '--quiet',
                        help='Be quieter',
                        action='store_true')
    parser.add_argument('--ignorerepo',
                        help='Specify a repo to ignore',
                        metavar='repo')
    args = parser.parse_args()

    VERBOSE=True
    if args.quiet:
        VERBOSE=False

    _baseurl = config['AUR']['BaseUrl']

    if args.search:
        libaur.printer.pretty_print_search(args.search, baseurl=_baseurl)
    elif args.msearch:
        libaur.printer.pretty_print_search(args.msearch, stype='msearch',
                baseurl=_baseurl)
    elif args.info:
        libaur.printer.pretty_print_simple_info([args.info], baseurl=_baseurl)
    elif args.update:
        if args.ignorerepo:
            libaur.printer.pretty_print_updpkgs(other_repos=[args.ignorerepo],
                    baseurl=_baseurl)
        else:
            libaur.printer.pretty_print_updpkgs(baseurl=_baseurl)
    elif args.download:
        libaur.printer.download_pkgs([args.download], VERBOSE, baseurl=_baseurl)

