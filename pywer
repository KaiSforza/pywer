#!/usr/bin/env python3
__doc__ = '''
pywer AUR downloader

MIT/X Consortium License

Â© 2013-13 William Giokas <1007380@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
'''

import libaur.printer
import libaur.errors as error
import libaur.aur
import libaur
import configparser
import xdg.BaseDirectory
import argparse
import re
from os import path
from sys import exit
try:
    import pyalpm
    has_pyalpm = True
except ImportError:
    has_pyalpm = False


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            usage='%(prog)s [options] operation [target [target...]]',
            description='A simple AUR helper in python.',
            epilog='See the config file in $PREFIX/share/doc/pywer. \
                   Copy it to {} and edit it for use, or use `--config`.\
                   You may need to update the config file when updating\
                   pywer.'\
                   .format(xdg.BaseDirectory.xdg_config_home),
                   )
    # Operations
    # TODO: Find some way to only allow a single operation
    parser.add_argument('targ',
                        help="target to perform 'operation' on",
                        nargs='*', default=None, metavar='target')
    operations = parser.add_argument_group('Operations')
    operations.add_argument('-s', '--search',
                        help='Search for this package',
                        action='count', default=0)
    operations.add_argument('-i', '--info',
                        help='Get info for this package',
                        action='count', default=0)
    operations.add_argument('-m', '--msearch',
                        help='Search for this maintainers packages',
                        action='count', default=0)
    if has_pyalpm:
        operations.add_argument('-u', '--update',
                            help='Print package updates for the system',
                            action='count', default=0)
    operations.add_argument('-d', '--download',
                        help='Download the package',
                        action='count', default=0)

    # Options
    options = parser.add_argument_group('Options')
    options.add_argument('-V', '--version',
                        help='Print version',
                        action='version',
                        version='%(prog)s {}'.format(libaur.__version__))
    options.add_argument('-q', '--quiet',
                        help='Be quieter',
                        action='count', default=0)
    options.add_argument('-v', '--verbose',
                        help='Be verbose',
                        action='count', default=0)
    options.add_argument('-f', '--force',
                        help='overwrite existing files while downloading',
                        action='store_true', default=False)
    options.add_argument('-c', '--color',
                        help="Use color. One of 'always', 'auto' or 'never'",
                        metavar='when')
    options.add_argument('--ignore',
                        help="Ignore a package or comma separated list of packages",
                        metavar='pkg')
    options.add_argument('--format',
                        help='Print with specified format (see docs)',
                        metavar='fmt', default=None)
    options.add_argument('--sort',
                        help="Sort results by 'key'",
                        metavar='key')
    options.add_argument('--rsort',
                        help="Reverse sort results by 'key'",
                        metavar='key')
    options.add_argument('--config',
                        help='Specify an alternate config',
                        metavar='file')

    # Mostly things that are rarely used and are set in the config file.
    confflags = parser.add_argument_group('Configuration')
    confflags.add_argument('--baseurl',
                        help='Set a custom baseurl to an AUR',
                        metavar='url')
    confflags.add_argument('--dbpath',
                        help='Set a custom dbpath (for -u)',
                        metavar='path')
    confflags.add_argument('--ignorerepo',
                        help='Specify comma separated list of repos to ignore',
                        metavar='repo', nargs='+')
    confflags.add_argument('-o', '--ignore-ood',
                        help='Ignore out of date packages',
                        action='store_true')
    confflags.add_argument('--no-ignore-ood',
                        help='Do not ignore out of date packages',
                        action='store_true')
    confflags.add_argument('-t', '--target',
                        help='Specify an alternate download location',
                        metavar='dir')
    args = parser.parse_args()

    config = configparser.ConfigParser()
    if args.config:
        use_config = args.config
    else:
        use_config = xdg.BaseDirectory.xdg_config_home + '/pywer/pywer.ini'

    config.read(use_config)


    if not path.exists(use_config):
        message = 'pywer requires a config file at {}. See `pywer -h`.'\
                .format(use_config)
        raise error.ConfigMissing(message)

    SHOW_OOD = not config['Repos'].getboolean('IgnoreOOD')

    if args.color == 'always':
        USE_COLOR = 2
    elif args.color == 'auto':
        USE_COLOR = 1
    elif args.color == 'never':
        USE_COLOR = 0
    elif config['Printing']['Color'] == 'always':
        USE_COLOR = 2
    elif config['Printing']['Color'] == 'auto':
        USE_COLOR = 1
    else:
        USE_COLOR = 0

    # Sorting by what, and if reverse or not
    term_sort = 'Name'
    rev_sort = False
    if args.sort:
        term_sort = args.sort
    elif args.rsort:
        rev_sort = True
        term_sort = args.rsort

    # Ignore parsing
    ignore = []
    if args.ignore:
        ignore = args.ignore.split(',')

    VERBOSE = args.verbose - args.quiet

    if args.dbpath:
        DBPATH=args.dbpath
    else:
        DBPATH=config['pacman']['DBPath']


    if has_pyalpm:
        arg_count = sum(
                [args.search, args.msearch, args.info, args.download,
                    args.update])
    else:
        arg_count = sum([args.search, args.msearch, args.info, args.download])

    if arg_count != 1:
        if args.info == 2:
            pass
        elif sum([args.download, args.update]) == 2:
            pass
        else:
            raise error.ArgError('Invalid operation')
    # We cannot have certain args run without a target
    elif (args.search or args.msearch or args.info) and not args.targ:
        raise error.ArgError('Invalid opertaion')

    FORCE=args.force

    if args.baseurl:
        _baseurl = args.baseurl
    else:
        _baseurl = config['AUR']['BaseUrl']

    if args.search and args.targ:
        ret = libaur.printer.pretty_print_search(
                args.targ, baseurl=_baseurl, ood=SHOW_OOD, be_verbose=VERBOSE,
                color=USE_COLOR, format_str=args.format, dbpath=DBPATH,
                sort_as=term_sort, sort_rev=rev_sort, ign=ignore)
    elif args.msearch and args.targ:
        ret = libaur.printer.pretty_print_search(
                args.targ, stype='msearch', baseurl=_baseurl, ood=SHOW_OOD,
                be_verbose=VERBOSE, color=USE_COLOR, format_str=args.format,
                dbpath=DBPATH, sort_as=term_sort, sort_rev=rev_sort,
                ign=ignore)
    elif args.info and args.targ:
        if args.info > 1:
            ret = libaur.printer.pretty_print_info(
                    args.targ, baseurl=_baseurl, ood=SHOW_OOD, color=USE_COLOR,
                    more_info=True, dbpath=DBPATH, format_str=args.format,
                    sort_as=term_sort, sort_rev=rev_sort, ign=ignore)
        else:
            ret = libaur.printer.pretty_print_info(
                    args.targ, baseurl=_baseurl, ood=SHOW_OOD, color=USE_COLOR,
                    dbpath=DBPATH, format_str=args.format, sort_as=term_sort,
                    sort_rev=rev_sort, ign=ignore)

    elif args.download and args.update:
        if args.target:
            dl_path = path.expanduser(args.target)
        else:
            dl_path = path.expanduser(config['Filesystem']['DownloadPath'])
        dl_path = path.expandvars(dl_path)

        # Get ignored repos for updpkgs
        if args.ignorerepo:
            repo_ignore = args.ignorerepo
        else:
            repo_ignore = re.split(',', config['Repos']['IgnoreRepo'])

        updated_pkgs = libaur.aur.UpdatedPkgs(repo_ignore, baseurl=_baseurl,
                dbpath=DBPATH, ign_pkg=ignore)

        # Get a list of installed packages
        upddict = updated_pkgs.get_upd_pkgs()
        pkgs = list(upddict.keys())
        if len(pkgs) < 1:
            exit(1)

        # Create the full list including the ones specified on the command line
        updpkgs = args.targ.copy()
        # Extend it with the updated packages
        updpkgs.extend(pkgs)

        ret = libaur.printer.download_pkgs(
                updpkgs, dl_path, dl_verbose=VERBOSE, baseurl=_baseurl,
                dl_force=FORCE, ood=SHOW_OOD, color=USE_COLOR, ign=ignore)

    elif args.download and args.targ:
        if args.target:
            dl_path = path.expanduser(args.target)
        else:
            dl_path = path.expanduser(config['Filesystem']['DownloadPath'])
        dl_path = path.expandvars(dl_path)
        ret = libaur.printer.download_pkgs(
                args.targ, dl_path, dl_verbose=VERBOSE, baseurl=_baseurl,
                dl_force=FORCE, ood=SHOW_OOD, color=USE_COLOR, ign=ignore)
    elif has_pyalpm and args.update:
        if args.ignorerepo:
            repo_ignore = args.ignorerepo
        else:
            repo_ignore = re.split(',', config['Repos']['IgnoreRepo'])

        if not args.targ:
            ret = libaur.printer.pretty_print_updpkgs(
                    other_repos=repo_ignore, baseurl=_baseurl,
                    be_verbose=VERBOSE, dbpath=DBPATH, color=USE_COLOR,
                    ign=ignore)
        else:
            ret = libaur.printer.pretty_print_updpkgs(
                    other_repos=repo_ignore, baseurl=_baseurl, pkgs=args.targ,
                    be_verbose=VERBOSE, dbpath=DBPATH, color=USE_COLOR,
                    ign=ignore)
    else:
        if VERBOSE >= 0:
            print('Invalid operation specified. (Use -h for help)')
        exit(1)

    if not ret:
        exit(1)
