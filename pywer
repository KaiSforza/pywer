#!/usr/bin/env python3
import libaur.aur as libaur
import libaur.printer
import configparser
import xdg.BaseDirectory
import argparse
import re
from os import path

config = configparser.ConfigParser()
config.read(xdg.BaseDirectory.xdg_config_home + '/pywer/pywer.ini')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            description='A simple AUR helper in python.',
            epilog='See the config file in $PREFIX/share/doc/pywer. \
                   Copy it to {} and edit it for use.'.format(xdg.BaseDirectory.xdg_config_home),
                   )
    # Operations
    # TODO: Find some way to only allow a single operation
    operations = parser.add_argument_group('Operations')
    operations.add_argument('-s', '--search',
                        help='Search for this package',
                        metavar='term')
    operations.add_argument('-i', '--info',
                        help='Get info for this package',
                        metavar='pkg')
    operations.add_argument('-m', '--msearch',
                        help='Search for this maintainers packages',
                        metavar='maintainer')
    operations.add_argument('-u', '--update',
                        help='Print package updates for the system',
                        action='store_true')
    operations.add_argument('-d', '--download',
                        help='Download the package',
                        metavar='pkg')

    # Options
    options = parser.add_argument_group('Options')
    options.add_argument('-q', '--quiet',
                        help='Be quieter',
                        action='store_true')
    options.add_argument('--ignorerepo',
                        help='Specify a repo to ignore',
                        metavar='repo')
    args = parser.parse_args()

    VERBOSE=True
    if args.quiet:
        VERBOSE=False

    _baseurl = config['AUR']['BaseUrl']

    if args.search:
        libaur.printer.pretty_print_search(args.search, baseurl=_baseurl)
    elif args.msearch:
        libaur.printer.pretty_print_search(args.msearch, stype='msearch',
                baseurl=_baseurl)
    elif args.info:
        libaur.printer.pretty_print_simple_info([args.info], baseurl=_baseurl)
    elif args.update:
        if args.ignorerepo:
            libaur.printer.pretty_print_updpkgs(other_repos=[args.ignorerepo],
                    baseurl=_baseurl)
        else:
            _or = re.split(',', config['Repos']['IgnoreRepo'])
            libaur.printer.pretty_print_updpkgs(other_repos=_or, baseurl=_baseurl)
    elif args.download:
        dl_path = path.expanduser(config['Filesystem']['DownloadPath'])
        dl_path = path.expandvars(dl_path)
        libaur.printer.download_pkgs([args.download], dl_path, dl_verbose=VERBOSE,
                baseurl=_baseurl)
    else:
        print('error: No operation specified. (use -h for help)')
