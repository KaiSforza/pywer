#!/usr/bin/env python3
import libaur.aur as libaur
import libaur.printer
import libaur.errors as error
import configparser
import xdg.BaseDirectory
import argparse
import re
from os import path

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            description='A simple AUR helper in python.',
            epilog='See the config file in $PREFIX/share/doc/pywer. \
                   Copy it to {} and edit it for use.'.format(xdg.BaseDirectory.xdg_config_home),
                   )
    # Operations
    # TODO: Find some way to only allow a single operation
    operations = parser.add_argument_group('Operations')
    operations.add_argument('-s', '--search',
                        help='Search for this package',
                        metavar='term')
    operations.add_argument('-i', '--info',
                        help='Get info for this package',
                        metavar='pkg', nargs='+')
    operations.add_argument('-m', '--msearch',
                        help='Search for this maintainers packages',
                        metavar='maintainer')
    operations.add_argument('-u', '--update',
                        help='Print package updates for the system',
                        metavar='pkg', nargs='*', default='-DEFAULT')
    operations.add_argument('-d', '--download',
                        help='Download the package',
                        metavar='pkg', nargs='+')

    # Options
    options = parser.add_argument_group('Options')
    options.add_argument('-q', '--quiet',
                        help='Be quieter',
                        action='store_true')
    options.add_argument('--ignorerepo',
                        help='Specify comma separated list of repos to ignore',
                        metavar='repo')
    options.add_argument('-f', '--force',
                        help='overwrite existing files while downloading',
                        action='store_true')
    options.add_argument('--config',
                        help='Specify an alternate config',
                        metavar='file')
    options.add_argument('-t', '--target',
                        help='Specify an alternate download location',
                        metavar='dir')
    args = parser.parse_args()

    config = configparser.ConfigParser()
    if args.config:
        use_config = args.config
    else:
        use_config = xdg.BaseDirectory.xdg_config_home + '/pywer/pywer.ini' 
    config.read(use_config)


    if not path.exists(use_config):
        message = 'pywer requires a config file at {}. See `pywer -h`.'\
                .format(use_config)
        raise error.ConfigMissing(message)

    VERBOSE=True
    if args.quiet:
        VERBOSE=False

    FORCE=False
    if args.force:
        FORCE=True

    _baseurl = config['AUR']['BaseUrl']

    if args.search:
        libaur.printer.pretty_print_search(args.search, baseurl=_baseurl)
    elif args.msearch:
        libaur.printer.pretty_print_search(args.msearch, stype='msearch',
                baseurl=_baseurl)
    elif args.info:
        libaur.printer.pretty_print_simple_info(args.info, baseurl=_baseurl)
    elif args.download:
        if args.target:
            dl_path = path.expanduser(args.target)
        else:
            dl_path = path.expanduser(config['Filesystem']['DownloadPath'])
        dl_path = path.expandvars(dl_path)
        libaur.printer.download_pkgs(args.download, dl_path, dl_verbose=VERBOSE,
                baseurl=_baseurl, dl_force=FORCE)
    elif not args.update == '-DEFAULT':
        if args.ignorerepo:
            libaur.printer.pretty_print_updpkgs(other_repos=[args.ignorerepo],
                    baseurl=_baseurl, pkgs=args.update)
        else:
            _or = re.split(',', config['Repos']['IgnoreRepo'])
            libaur.printer.pretty_print_updpkgs(other_repos=_or,
                    baseurl=_baseurl, pkgs=args.update)
    else:
        print('error: No operation specified. (use -h for help)')
